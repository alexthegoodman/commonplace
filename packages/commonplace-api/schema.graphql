### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Category {
  id: String!
  interests(after: InterestWhereUniqueInput, before: InterestWhereUniqueInput, first: Int, last: Int): [Interest!]!
  name: String!
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  interests: InterestListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  id: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Interest {
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  id: String!
  name: String!
}

input InterestListRelationFilter {
  every: InterestWhereInput
  none: InterestWhereInput
  some: InterestWhereInput
}

input InterestOrderByWithRelationInput {
  categories: CategoryOrderByRelationAggregateInput
  contentType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  modifiers: ModifierOrderByRelationAggregateInput
  name: SortOrder
  posts: PostOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input InterestWhereInput {
  AND: [InterestWhereInput!]
  NOT: [InterestWhereInput!]
  OR: [InterestWhereInput!]
  categories: CategoryListRelationFilter
  contentType: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  modifiers: ModifierListRelationFilter
  name: StringFilter
  posts: PostListRelationFilter
  updatedAt: DateTimeFilter
}

input InterestWhereUniqueInput {
  id: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Message {
  content: String!
  createdAt: DateTime!
  post: Post
  readBy(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  type: String!
  updatedAt: DateTime!
  user: User!
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  readBy: UserOrderByRelationAggregateInput
  thread: ThreadOrderByWithRelationInput
  threadId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  post: PostWhereInput
  postId: StringNullableFilter
  readBy: UserListRelationFilter
  thread: ThreadWhereInput
  threadId: StringFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input MessageWhereUniqueInput {
  id: String
}

input ModifierListRelationFilter {
  every: ModifierWhereInput
  none: ModifierWhereInput
  some: ModifierWhereInput
}

input ModifierOrderByRelationAggregateInput {
  _count: SortOrder
}

input ModifierWhereInput {
  AND: [ModifierWhereInput!]
  NOT: [ModifierWhereInput!]
  OR: [ModifierWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  interests: InterestListRelationFilter
  name: StringFilter
  posts: PostListRelationFilter
  updatedAt: DateTimeFilter
}

type Mutation {
  createMessage(authorEmail: String!, content: String!, postCreatorEmail: String, postId: String, threadId: String, type: String!): Message!
  createPost(contentType: String!, creatorId: String!, description: String!, file1Data: String!, file1Name: String!, file1Size: Int!, file1Type: String!, file2Data: String, file2Name: String, file2Size: Int, file2Type: String, interestId: String!, title: String!): Post!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Post {
  content: String!
  contentPreview: String!
  contentType: String!
  createdAt: DateTime!
  creator: User!
  description: String!
  generatedTitleSlug: String!
  id: String!
  interest: Interest!
  title: String!
  updatedAt: DateTime!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  content: SortOrder
  contentPreview: SortOrder
  contentType: SortOrder
  createdAt: SortOrder
  creator: UserOrderByWithRelationInput
  creatorId: SortOrder
  description: SortOrder
  generatedTitleSlug: SortOrder
  id: SortOrder
  interest: InterestOrderByWithRelationInput
  interestId: SortOrder
  messages: MessageOrderByRelationAggregateInput
  modifiers: ModifierOrderByRelationAggregateInput
  title: SortOrder
  updatedAt: SortOrder
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  content: StringFilter
  contentPreview: StringFilter
  contentType: StringFilter
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringFilter
  description: StringFilter
  generatedTitleSlug: StringFilter
  id: StringFilter
  interest: InterestWhereInput
  interestId: StringFilter
  messages: MessageListRelationFilter
  modifiers: ModifierListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  generatedTitleSlug: String
  id: String
}

type PublicPost {
  content: String
  contentPreview: String
  contentType: String
  createdAt: DateTime
  description: String
  generatedTitleSlug: String
  id: String
  title: String
  updatedAt: DateTime
}

type PublicUser {
  chosenUsername: String
  coverImage: String
  generatedUsername: String
  name: String
  profileImage: String
}

type Query {
  authenticate(email: String!, password: String!): String!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  getPostByPostTitle(postTitle: String!): PublicPost
  getPostImpressions(postTitle: String!): [Message]!
  getPostsByUsername(chosenUsername: String!): [PublicPost]
  getUserByPostTitle(postTitle: String!): PublicUser
  getUserByUsername(chosenUsername: String!): PublicUser
  interests(after: InterestWhereUniqueInput, before: InterestWhereUniqueInput, first: Int, last: Int): [Interest!]!
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByWithRelationInput!], where: PostWhereInput): [Post!]!
  registerUser(email: String!, password: String!): String!
  thread(where: ThreadWhereUniqueInput!): Thread
  user(id: String!): User
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Thread {
  createdAt: DateTime!
  id: String!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int, orderBy: [MessageOrderByWithRelationInput!]): [Message!]!
  repliesAllowed: Boolean!
  updatedAt: DateTime!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input ThreadListRelationFilter {
  every: ThreadWhereInput
  none: ThreadWhereInput
  some: ThreadWhereInput
}

input ThreadOrderByRelationAggregateInput {
  _count: SortOrder
}

input ThreadOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  messages: MessageOrderByRelationAggregateInput
  repliesAllowed: SortOrder
  updatedAt: SortOrder
  users: UserOrderByRelationAggregateInput
}

input ThreadWhereInput {
  AND: [ThreadWhereInput!]
  NOT: [ThreadWhereInput!]
  OR: [ThreadWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  messages: MessageListRelationFilter
  repliesAllowed: BoolFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input ThreadWhereUniqueInput {
  id: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  chosenUsername: String
  coverImage: String!
  createdAt: DateTime!
  credit: Int!
  email: String!
  generatedUsername: String!
  name: String
  posts: [Post!]!
  profileImage: String!
  threads(after: ThreadWhereUniqueInput, before: ThreadWhereUniqueInput, first: Int, last: Int, orderBy: [ThreadOrderByWithRelationInput!], where: ThreadWhereInput): [Thread!]!
  updatedAt: DateTime!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  chosenUsername: SortOrder
  coverImage: SortOrder
  createdAt: SortOrder
  credit: SortOrder
  email: SortOrder
  generatedUsername: SortOrder
  id: SortOrder
  messages: MessageOrderByRelationAggregateInput
  name: SortOrder
  password: SortOrder
  posts: PostOrderByRelationAggregateInput
  profileImage: SortOrder
  readMessages: MessageOrderByRelationAggregateInput
  threads: ThreadOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  chosenUsername: StringNullableFilter
  coverImage: StringFilter
  createdAt: DateTimeFilter
  credit: IntFilter
  email: StringFilter
  generatedUsername: StringFilter
  id: StringFilter
  messages: MessageListRelationFilter
  name: StringNullableFilter
  password: StringFilter
  posts: PostListRelationFilter
  profileImage: StringFilter
  readMessages: MessageListRelationFilter
  threads: ThreadListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  chosenUsername: String
  email: String
  generatedUsername: String
  id: String
}