### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Category {
  interests(after: InterestWhereUniqueInput, before: InterestWhereUniqueInput, first: Int, last: Int): [Interest!]!
  name: String!
}

input CategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input CategoryWhereUniqueInput {
  id: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Interest {
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  name: String!
}

input InterestOrderByWithRelationInput {
  categories: CategoryOrderByRelationAggregateInput
  contentType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  modifiers: ModifierOrderByRelationAggregateInput
  name: SortOrder
  posts: PostOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input InterestWhereUniqueInput {
  id: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Message {
  content: String!
  createdAt: DateTime!
  post: Post
  readBy(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  type: String!
  updatedAt: DateTime!
  user: User!
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  readBy: UserOrderByRelationAggregateInput
  thread: ThreadOrderByWithRelationInput
  threadId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input MessageWhereUniqueInput {
  id: String
}

input ModifierOrderByRelationAggregateInput {
  _count: SortOrder
}

type Mutation {
  createMessage(authorEmail: String!, content: String!, postCreatorEmail: String, threadId: String, type: String!): Message!
}

type Post {
  content: String!
  contentPreview: String!
  contentType: String!
  createdAt: DateTime!
  creator: User!
  description: String!
  interest: Interest!
  title: String!
  updatedAt: DateTime!
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  content: SortOrder
  contentPreview: SortOrder
  contentType: SortOrder
  createdAt: SortOrder
  creator: UserOrderByWithRelationInput
  creatorId: SortOrder
  description: SortOrder
  generatedTitleSlug: SortOrder
  id: SortOrder
  interest: InterestOrderByWithRelationInput
  interestId: SortOrder
  messages: MessageOrderByRelationAggregateInput
  modifiers: ModifierOrderByRelationAggregateInput
  title: SortOrder
  updatedAt: SortOrder
}

input PostWhereUniqueInput {
  generatedTitleSlug: String
  id: String
}

type Query {
  authenticate(email: String!, password: String!): String!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  getPostByPostTitle(postTitle: String!): Post!
  getPostsByUsername(chosenUsername: String!): [Post]!
  getUserByPostTitle(postTitle: String!): User!
  getUserByUsername(chosenUsername: String!): User!
  interests(after: InterestWhereUniqueInput, before: InterestWhereUniqueInput, first: Int, last: Int): [Interest!]!
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  registerUser(email: String!, password: String!): String!
  thread(where: ThreadWhereUniqueInput!): Thread
  user(id: String!): User!
}

enum SortOrder {
  asc
  desc
}

type Thread {
  createdAt: DateTime!
  id: String!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int, orderBy: [MessageOrderByWithRelationInput!]): [Message!]!
  repliesAllowed: Boolean!
  updatedAt: DateTime!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input ThreadOrderByRelationAggregateInput {
  _count: SortOrder
}

input ThreadOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  messages: MessageOrderByRelationAggregateInput
  repliesAllowed: SortOrder
  updatedAt: SortOrder
  users: UserOrderByRelationAggregateInput
}

input ThreadWhereUniqueInput {
  id: String
}

type User {
  chosenUsername: String
  coverImage: String!
  createdAt: DateTime!
  credit: Int!
  email: String!
  generatedUsername: String!
  name: String
  posts: [Post!]!
  profileImage: String!
  threads(after: ThreadWhereUniqueInput, before: ThreadWhereUniqueInput, first: Int, last: Int): [Thread!]!
  updatedAt: DateTime!
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  chosenUsername: SortOrder
  coverImage: SortOrder
  createdAt: SortOrder
  credit: SortOrder
  email: SortOrder
  generatedUsername: SortOrder
  id: SortOrder
  messages: MessageOrderByRelationAggregateInput
  name: SortOrder
  password: SortOrder
  posts: PostOrderByRelationAggregateInput
  profileImage: SortOrder
  readMessages: MessageOrderByRelationAggregateInput
  threads: ThreadOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserWhereUniqueInput {
  chosenUsername: String
  email: String
  generatedUsername: String
  id: String
}