### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Category {
  id: String!
  interests(after: InterestWhereUniqueInput, before: InterestWhereUniqueInput, first: Int, last: Int): [Interest!]!
  name: String!
}

input CategoryCreateNestedManyWithoutInterestsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutInterestsInput!]
  create: [CategoryCreateWithoutInterestsInput!]
}

input CategoryCreateOrConnectWithoutInterestsInput {
  create: CategoryCreateWithoutInterestsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutInterestsInput {
  createdAt: DateTime
  generatedCategorySlug: String
  id: String
  name: String!
  updatedAt: DateTime
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  generatedCategorySlug: StringFilter
  id: StringFilter
  interests: InterestListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  generatedCategorySlug: String
  id: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Interest {
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  id: String!
  name: String!
}

input InterestCreateNestedManyWithoutModifiersInput {
  connect: [InterestWhereUniqueInput!]
  connectOrCreate: [InterestCreateOrConnectWithoutModifiersInput!]
  create: [InterestCreateWithoutModifiersInput!]
}

input InterestCreateNestedOneWithoutPostsInput {
  connect: InterestWhereUniqueInput
  connectOrCreate: InterestCreateOrConnectWithoutPostsInput
  create: InterestCreateWithoutPostsInput
}

input InterestCreateOrConnectWithoutModifiersInput {
  create: InterestCreateWithoutModifiersInput!
  where: InterestWhereUniqueInput!
}

input InterestCreateOrConnectWithoutPostsInput {
  create: InterestCreateWithoutPostsInput!
  where: InterestWhereUniqueInput!
}

input InterestCreateWithoutModifiersInput {
  categories: CategoryCreateNestedManyWithoutInterestsInput
  contentType: String!
  createdAt: DateTime
  generatedInterestSlug: String
  id: String
  name: String!
  posts: PostCreateNestedManyWithoutInterestInput
  updatedAt: DateTime
}

input InterestCreateWithoutPostsInput {
  categories: CategoryCreateNestedManyWithoutInterestsInput
  contentType: String!
  createdAt: DateTime
  generatedInterestSlug: String
  id: String
  modifiers: ModifierCreateNestedManyWithoutInterestsInput
  name: String!
  updatedAt: DateTime
}

input InterestListRelationFilter {
  every: InterestWhereInput
  none: InterestWhereInput
  some: InterestWhereInput
}

input InterestOrderByWithRelationInput {
  categories: CategoryOrderByRelationAggregateInput
  contentType: SortOrder
  createdAt: SortOrder
  generatedInterestSlug: SortOrder
  id: SortOrder
  modifiers: ModifierOrderByRelationAggregateInput
  name: SortOrder
  posts: PostOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input InterestWhereInput {
  AND: [InterestWhereInput!]
  NOT: [InterestWhereInput!]
  OR: [InterestWhereInput!]
  categories: CategoryListRelationFilter
  contentType: StringFilter
  createdAt: DateTimeFilter
  generatedInterestSlug: StringFilter
  id: StringFilter
  modifiers: ModifierListRelationFilter
  name: StringFilter
  posts: PostListRelationFilter
  updatedAt: DateTimeFilter
}

input InterestWhereUniqueInput {
  generatedInterestSlug: String
  id: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Message {
  content: String!
  createdAt: DateTime!
  id: String!
  post: Post
  type: String!
  updatedAt: DateTime!
  user: User!
}

input MessageCreateManyPostInput {
  content: String!
  createdAt: DateTime
  id: String
  threadId: String!
  type: String!
  updatedAt: DateTime
  userId: String!
}

input MessageCreateManyPostInputEnvelope {
  data: [MessageCreateManyPostInput!]
  skipDuplicates: Boolean
}

input MessageCreateManyThreadInput {
  content: String!
  createdAt: DateTime
  id: String
  postId: String
  type: String!
  updatedAt: DateTime
  userId: String!
}

input MessageCreateManyThreadInputEnvelope {
  data: [MessageCreateManyThreadInput!]
  skipDuplicates: Boolean
}

input MessageCreateManyUserInput {
  content: String!
  createdAt: DateTime
  id: String
  postId: String
  threadId: String!
  type: String!
  updatedAt: DateTime
}

input MessageCreateManyUserInputEnvelope {
  data: [MessageCreateManyUserInput!]
  skipDuplicates: Boolean
}

input MessageCreateNestedManyWithoutPostInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutPostInput!]
  create: [MessageCreateWithoutPostInput!]
  createMany: MessageCreateManyPostInputEnvelope
}

input MessageCreateNestedManyWithoutThreadInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutThreadInput!]
  create: [MessageCreateWithoutThreadInput!]
  createMany: MessageCreateManyThreadInputEnvelope
}

input MessageCreateNestedManyWithoutUserInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutUserInput!]
  create: [MessageCreateWithoutUserInput!]
  createMany: MessageCreateManyUserInputEnvelope
}

input MessageCreateOrConnectWithoutPostInput {
  create: MessageCreateWithoutPostInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateOrConnectWithoutThreadInput {
  create: MessageCreateWithoutThreadInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateOrConnectWithoutUserInput {
  create: MessageCreateWithoutUserInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateWithoutPostInput {
  content: String!
  createdAt: DateTime
  id: String
  thread: ThreadCreateNestedOneWithoutMessagesInput!
  type: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutMessagesInput!
}

input MessageCreateWithoutThreadInput {
  content: String!
  createdAt: DateTime
  id: String
  post: PostCreateNestedOneWithoutMessagesInput
  type: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutMessagesInput!
}

input MessageCreateWithoutUserInput {
  content: String!
  createdAt: DateTime
  id: String
  post: PostCreateNestedOneWithoutMessagesInput
  thread: ThreadCreateNestedOneWithoutMessagesInput!
  type: String!
  updatedAt: DateTime
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  thread: ThreadOrderByWithRelationInput
  threadId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  post: PostWhereInput
  postId: StringNullableFilter
  thread: ThreadWhereInput
  threadId: StringFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input MessageWhereUniqueInput {
  id: String
}

input ModifierCreateNestedManyWithoutInterestsInput {
  connect: [ModifierWhereUniqueInput!]
  connectOrCreate: [ModifierCreateOrConnectWithoutInterestsInput!]
  create: [ModifierCreateWithoutInterestsInput!]
}

input ModifierCreateNestedManyWithoutPostsInput {
  connect: [ModifierWhereUniqueInput!]
  connectOrCreate: [ModifierCreateOrConnectWithoutPostsInput!]
  create: [ModifierCreateWithoutPostsInput!]
}

input ModifierCreateOrConnectWithoutInterestsInput {
  create: ModifierCreateWithoutInterestsInput!
  where: ModifierWhereUniqueInput!
}

input ModifierCreateOrConnectWithoutPostsInput {
  create: ModifierCreateWithoutPostsInput!
  where: ModifierWhereUniqueInput!
}

input ModifierCreateWithoutInterestsInput {
  createdAt: DateTime
  generatedModifierSlug: String
  id: String
  name: String!
  posts: PostCreateNestedManyWithoutModifiersInput
  updatedAt: DateTime
}

input ModifierCreateWithoutPostsInput {
  createdAt: DateTime
  generatedModifierSlug: String
  id: String
  interests: InterestCreateNestedManyWithoutModifiersInput
  name: String!
  updatedAt: DateTime
}

input ModifierListRelationFilter {
  every: ModifierWhereInput
  none: ModifierWhereInput
  some: ModifierWhereInput
}

input ModifierOrderByRelationAggregateInput {
  _count: SortOrder
}

input ModifierWhereInput {
  AND: [ModifierWhereInput!]
  NOT: [ModifierWhereInput!]
  OR: [ModifierWhereInput!]
  createdAt: DateTimeFilter
  generatedModifierSlug: StringFilter
  id: StringFilter
  interests: InterestListRelationFilter
  name: StringFilter
  posts: PostListRelationFilter
  updatedAt: DateTimeFilter
}

input ModifierWhereUniqueInput {
  generatedModifierSlug: String
  id: String
}

type Mutation {
  createMessage(authorEmail: String!, content: String!, postCreatorEmail: String, postId: String, threadId: String, type: String!): Message!
  createOneRecord(data: RecordCreateInput!): Record!
  createPost(contentType: String!, creatorId: String!, description: String!, file1Data: String, file1Name: String, file1Size: Int, file1Type: String, file2Data: String, file2Name: String, file2Size: Int, file2Type: String, interestId: String!, text: String, title: String!): Post!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Post {
  content: String!
  contentPreview: String!
  contentType: String!
  createdAt: DateTime!
  creator: User!
  description: String!
  generatedTitleSlug: String!
  id: String!
  interest: Interest!
  title: String!
  updatedAt: DateTime!
}

input PostCreateManyCreatorInput {
  content: String!
  contentPreview: String!
  contentType: String!
  createdAt: DateTime
  description: String!
  generatedTitleSlug: String
  id: String
  interestId: String!
  title: String!
  updatedAt: DateTime
}

input PostCreateManyCreatorInputEnvelope {
  data: [PostCreateManyCreatorInput!]
  skipDuplicates: Boolean
}

input PostCreateManyInterestInput {
  content: String!
  contentPreview: String!
  contentType: String!
  createdAt: DateTime
  creatorId: String!
  description: String!
  generatedTitleSlug: String
  id: String
  title: String!
  updatedAt: DateTime
}

input PostCreateManyInterestInputEnvelope {
  data: [PostCreateManyInterestInput!]
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutCreatorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutCreatorInput!]
  create: [PostCreateWithoutCreatorInput!]
  createMany: PostCreateManyCreatorInputEnvelope
}

input PostCreateNestedManyWithoutInterestInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutInterestInput!]
  create: [PostCreateWithoutInterestInput!]
  createMany: PostCreateManyInterestInputEnvelope
}

input PostCreateNestedManyWithoutModifiersInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutModifiersInput!]
  create: [PostCreateWithoutModifiersInput!]
}

input PostCreateNestedOneWithoutMessagesInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutMessagesInput
  create: PostCreateWithoutMessagesInput
}

input PostCreateOrConnectWithoutCreatorInput {
  create: PostCreateWithoutCreatorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutInterestInput {
  create: PostCreateWithoutInterestInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutMessagesInput {
  create: PostCreateWithoutMessagesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutModifiersInput {
  create: PostCreateWithoutModifiersInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutCreatorInput {
  content: String!
  contentPreview: String!
  contentType: String!
  createdAt: DateTime
  description: String!
  generatedTitleSlug: String
  id: String
  interest: InterestCreateNestedOneWithoutPostsInput!
  messages: MessageCreateNestedManyWithoutPostInput
  modifiers: ModifierCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutInterestInput {
  content: String!
  contentPreview: String!
  contentType: String!
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutPostsInput!
  description: String!
  generatedTitleSlug: String
  id: String
  messages: MessageCreateNestedManyWithoutPostInput
  modifiers: ModifierCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutMessagesInput {
  content: String!
  contentPreview: String!
  contentType: String!
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutPostsInput!
  description: String!
  generatedTitleSlug: String
  id: String
  interest: InterestCreateNestedOneWithoutPostsInput!
  modifiers: ModifierCreateNestedManyWithoutPostsInput
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutModifiersInput {
  content: String!
  contentPreview: String!
  contentType: String!
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutPostsInput!
  description: String!
  generatedTitleSlug: String
  id: String
  interest: InterestCreateNestedOneWithoutPostsInput!
  messages: MessageCreateNestedManyWithoutPostInput
  title: String!
  updatedAt: DateTime
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  content: SortOrder
  contentPreview: SortOrder
  contentType: SortOrder
  createdAt: SortOrder
  creator: UserOrderByWithRelationInput
  creatorId: SortOrder
  description: SortOrder
  generatedTitleSlug: SortOrder
  id: SortOrder
  interest: InterestOrderByWithRelationInput
  interestId: SortOrder
  messages: MessageOrderByRelationAggregateInput
  modifiers: ModifierOrderByRelationAggregateInput
  title: SortOrder
  updatedAt: SortOrder
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  content: StringFilter
  contentPreview: StringFilter
  contentType: StringFilter
  createdAt: DateTimeFilter
  creator: UserWhereInput
  creatorId: StringFilter
  description: StringFilter
  generatedTitleSlug: StringFilter
  id: StringFilter
  interest: InterestWhereInput
  interestId: StringFilter
  messages: MessageListRelationFilter
  modifiers: ModifierListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  generatedTitleSlug: String
  id: String
}

type PublicPost {
  content: String
  contentPreview: String
  contentType: String
  createdAt: DateTime
  description: String
  generatedTitleSlug: String
  id: String
  interest: Interest
  title: String
  updatedAt: DateTime
}

type PublicUser {
  chosenUsername: String
  coverImage: String
  generatedUsername: String
  name: String
  profileImage: String
}

type Query {
  authenticate(email: String!, password: String!): String!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  getPostByPostTitle(postTitle: String!): PublicPost
  getPostImpressions(postTitle: String!): [Message]!
  getPostURLs: [String]
  getPostsByUsername(chosenUsername: String!): [PublicPost]
  getProfileURLs: [String]
  getUserByPostTitle(postTitle: String!): PublicUser
  getUserByUsername(chosenUsername: String!): PublicUser
  interests(after: InterestWhereUniqueInput, before: InterestWhereUniqueInput, first: Int, last: Int): [Interest!]!
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByWithRelationInput!], where: PostWhereInput): [Post!]!
  registerUser(email: String!, password: String!): String!
  thread(where: ThreadWhereUniqueInput!): Thread
  user(id: String!): User
}

enum QueryMode {
  default
  insensitive
}

type Record {
  content: String
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input RecordCreateInput {
  content: String
  createdAt: DateTime
  id: String
  name: String!
  thread: ThreadCreateNestedOneWithoutReadHistoryInput
  updatedAt: DateTime
}

input RecordCreateManyThreadInput {
  content: String
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input RecordCreateManyThreadInputEnvelope {
  data: [RecordCreateManyThreadInput!]
  skipDuplicates: Boolean
}

input RecordCreateNestedManyWithoutThreadInput {
  connect: [RecordWhereUniqueInput!]
  connectOrCreate: [RecordCreateOrConnectWithoutThreadInput!]
  create: [RecordCreateWithoutThreadInput!]
  createMany: RecordCreateManyThreadInputEnvelope
}

input RecordCreateOrConnectWithoutThreadInput {
  create: RecordCreateWithoutThreadInput!
  where: RecordWhereUniqueInput!
}

input RecordCreateWithoutThreadInput {
  content: String
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input RecordListRelationFilter {
  every: RecordWhereInput
  none: RecordWhereInput
  some: RecordWhereInput
}

input RecordOrderByRelationAggregateInput {
  _count: SortOrder
}

input RecordOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  thread: ThreadOrderByWithRelationInput
  threadId: SortOrder
  updatedAt: SortOrder
}

input RecordWhereInput {
  AND: [RecordWhereInput!]
  NOT: [RecordWhereInput!]
  OR: [RecordWhereInput!]
  content: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  thread: ThreadWhereInput
  threadId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input RecordWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Thread {
  createdAt: DateTime!
  id: String!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int, orderBy: [MessageOrderByWithRelationInput!]): [Message!]!
  readHistory(after: RecordWhereUniqueInput, before: RecordWhereUniqueInput, first: Int, last: Int, orderBy: [RecordOrderByWithRelationInput!]): [Record!]!
  repliesAllowed: Boolean!
  updatedAt: DateTime!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input ThreadCreateNestedManyWithoutUsersInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutUsersInput!]
  create: [ThreadCreateWithoutUsersInput!]
}

input ThreadCreateNestedOneWithoutMessagesInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutMessagesInput
  create: ThreadCreateWithoutMessagesInput
}

input ThreadCreateNestedOneWithoutReadHistoryInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutReadHistoryInput
  create: ThreadCreateWithoutReadHistoryInput
}

input ThreadCreateOrConnectWithoutMessagesInput {
  create: ThreadCreateWithoutMessagesInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutReadHistoryInput {
  create: ThreadCreateWithoutReadHistoryInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutUsersInput {
  create: ThreadCreateWithoutUsersInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateWithoutMessagesInput {
  createdAt: DateTime
  id: String
  readHistory: RecordCreateNestedManyWithoutThreadInput
  repliesAllowed: Boolean!
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutThreadsInput
}

input ThreadCreateWithoutReadHistoryInput {
  createdAt: DateTime
  id: String
  messages: MessageCreateNestedManyWithoutThreadInput
  repliesAllowed: Boolean!
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutThreadsInput
}

input ThreadCreateWithoutUsersInput {
  createdAt: DateTime
  id: String
  messages: MessageCreateNestedManyWithoutThreadInput
  readHistory: RecordCreateNestedManyWithoutThreadInput
  repliesAllowed: Boolean!
  updatedAt: DateTime
}

input ThreadListRelationFilter {
  every: ThreadWhereInput
  none: ThreadWhereInput
  some: ThreadWhereInput
}

input ThreadOrderByRelationAggregateInput {
  _count: SortOrder
}

input ThreadOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  messages: MessageOrderByRelationAggregateInput
  readHistory: RecordOrderByRelationAggregateInput
  repliesAllowed: SortOrder
  updatedAt: SortOrder
  users: UserOrderByRelationAggregateInput
}

input ThreadWhereInput {
  AND: [ThreadWhereInput!]
  NOT: [ThreadWhereInput!]
  OR: [ThreadWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  messages: MessageListRelationFilter
  readHistory: RecordListRelationFilter
  repliesAllowed: BoolFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input ThreadWhereUniqueInput {
  id: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  chosenUsername: String
  coverImage: String!
  createdAt: DateTime!
  credit: Int!
  email: String!
  generatedUsername: String!
  name: String
  posts: [Post!]!
  profileImage: String!
  threads(after: ThreadWhereUniqueInput, before: ThreadWhereUniqueInput, first: Int, last: Int, orderBy: [ThreadOrderByWithRelationInput!], where: ThreadWhereInput): [Thread!]!
  updatedAt: DateTime!
}

input UserCreateNestedManyWithoutThreadsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutThreadsInput!]
  create: [UserCreateWithoutThreadsInput!]
}

input UserCreateNestedOneWithoutMessagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMessagesInput
  create: UserCreateWithoutMessagesInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutThreadsInput {
  create: UserCreateWithoutThreadsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutMessagesInput {
  chosenUsername: String
  coverImage: String
  createdAt: DateTime
  credit: Int
  email: String!
  generatedUsername: String
  id: String
  name: String
  password: String!
  posts: PostCreateNestedManyWithoutCreatorInput
  profileImage: String
  threads: ThreadCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
}

input UserCreateWithoutPostsInput {
  chosenUsername: String
  coverImage: String
  createdAt: DateTime
  credit: Int
  email: String!
  generatedUsername: String
  id: String
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  password: String!
  profileImage: String
  threads: ThreadCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
}

input UserCreateWithoutThreadsInput {
  chosenUsername: String
  coverImage: String
  createdAt: DateTime
  credit: Int
  email: String!
  generatedUsername: String
  id: String
  messages: MessageCreateNestedManyWithoutUserInput
  name: String
  password: String!
  posts: PostCreateNestedManyWithoutCreatorInput
  profileImage: String
  updatedAt: DateTime
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  chosenUsername: SortOrder
  coverImage: SortOrder
  createdAt: SortOrder
  credit: SortOrder
  email: SortOrder
  generatedUsername: SortOrder
  id: SortOrder
  messages: MessageOrderByRelationAggregateInput
  name: SortOrder
  password: SortOrder
  posts: PostOrderByRelationAggregateInput
  profileImage: SortOrder
  threads: ThreadOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  chosenUsername: StringNullableFilter
  coverImage: StringFilter
  createdAt: DateTimeFilter
  credit: IntFilter
  email: StringFilter
  generatedUsername: StringFilter
  id: StringFilter
  messages: MessageListRelationFilter
  name: StringNullableFilter
  password: StringFilter
  posts: PostListRelationFilter
  profileImage: StringFilter
  threads: ThreadListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  chosenUsername: String
  email: String
  generatedUsername: String
  id: String
}